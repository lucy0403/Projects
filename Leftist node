

#ifndef LEFTIST_NODE_H
#define LEFTIST_NODE_H

#include <algorithm>
// You may use std::swap and std::min

#ifndef nullptr
#define nullptr 0
#endif

template <typename Type>
class Leftist_node {
	private:
		Type element;
		Leftist_node *left_tree;
		Leftist_node *right_tree;
		int heap_null_path_length;

	public:
		Leftist_node( Type const & );

		Type retrieve() const;
		bool empty() const;
		Leftist_node *left() const;
		Leftist_node *right() const;
		int count( Type const & ) const;
		int null_path_length() const;

		void push( Leftist_node *, Leftist_node *& );
		void clear();
};

template <typename Type>
Leftist_node<Type>::Leftist_node( Type const &obj ):
element( obj ),
left_tree( nullptr ),
right_tree( nullptr ),
heap_null_path_length( 0 ) {
	// does nothing
}

template <typename Type>
Type Leftist_node<Type>::retrieve() const {
    //Return the element.
    return element;
}

// You may need this

template <typename Type>
bool Leftist_node<Type>::empty() const {
    //if empty, then return
    return(this==nullptr);
    
    
}

template <typename Type>
Leftist_node<Type> *Leftist_node<Type>::left() const {
    // return the address of the left tree of this node
    return left_tree;
    
    
}

template <typename Type>
Leftist_node<Type> *Leftist_node<Type>::right() const {
    // return the address of the right tree of this node
    return right_tree;
    
    
}
template <typename Type>
int Leftist_node<Type>::count(Type const &obj) const {
    //initialize a return variable
    int ret=0;
    //traverses the tree of its left and right subtree
    if (this->left()!=nullptr)
        ret+=this->left()->count(obj);
    if (this->right()!=nullptr)
        ret+=this->right()->count(obj);
    // update ret counter value if find the object
    if (this->retrieve()==obj){
        ret+=1;
    }
    return ret;
}

template <typename Type>
int Leftist_node <Type>:: null_path_length() const {
    // return the member variable null-path length unless this is the null， return-1
    if (empty())
    return -1;
    
    else
    return heap_null_path_length;
    
    
}

template <typename Type>
void Leftist_node <Type>::push(Leftist_node *new_heap, Leftist_node *&ptr_to_this) {
    //if the new heap is null, return
    if (new_heap==nullptr){
        return;
    }
    else{
    //if this is null, set the pointer to this to be the new heap and return
        
    if ( ptr_to_this == nullptr)
        {ptr_to_this=new_heap;
         return;
        }
        //If the element of this node ≤  new_heap’s element, push the node into the right subree.
    if (ptr_to_this->retrieve() <= new_heap->retrieve()){

            if (ptr_to_this->right()!=nullptr)
            ptr_to_this->right_tree->push(new_heap,ptr_to_this->right_tree);
        
               
            else
            ptr_to_this->right_tree=new_heap;

     }
    // If the element (value) of current node > new_heap’s element, set the pointer to this to be the new heap and push this node to the new heap
        
   else {
        Leftist_node *temp=ptr_to_this;
        ptr_to_this=new_heap;
        ptr_to_this->right_tree->push(temp,ptr_to_this->right_tree);
        }
     }
    //srt the left and right-side npl to -1 as default value;
            int npl_left=-1;
            int npl_right=-1;
    //get the npl value of the left and right subtrees; do it recursivly
            if (ptr_to_this->left()!=nullptr){
                npl_left=ptr_to_this->left()->null_path_length();
            }
            if (ptr_to_this->right()!=nullptr){
                npl_right=ptr_to_this->right()->null_path_length();
                
            }
    //m saves the value of smaller npl and updats the npl;
            int m=npl_left;
            if (m>npl_right)
                m=npl_right;
            ptr_to_this->heap_null_path_length=1+m;
    // if the left sub-tree has a smaller null_path_length than the right sub-tree, swap the two sub-trees;
            if (npl_left<npl_right)
            {Leftist_node*tmp=ptr_to_this->left_tree;
            ptr_to_this->left_tree=ptr_to_this->right_tree;
            ptr_to_this->right_tree=tmp;
                
            }
    
    
    }


template<typename Type>
void Leftist_node<Type>::clear() {
    
    if (empty())
    return;
    //Call clear function on the left sub-tree
    this->left_tree->clear();
    //Call clear function on the right sub-tree
    this->right_tree->clear();
    //delete this node
    delete this;
}




// You must implement everything

#endif
